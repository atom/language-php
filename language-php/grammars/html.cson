# This grammar file is responsible for including the actual PHP grammar
# by capturing <?php ?> tags
'scopeName': 'text.html.php'
'name': 'PHP'
'fileTypes': [
  'aw'
  'ctp'
  'inc'
  'install'
  'module'
  'php'
  'php_cs'
  'php3'
  'php4'
  'php5'
  'phpt'
  'phtml'
  'profile'
]
'firstLineMatch': '''(?x)
  # Hashbang
  ^\\#!.*(?:\\s|\\/)
    php\\d?
  (?:$|\\s)
  |
  # Modeline
  (?i:
    # Emacs
    -\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)
      php
    (?=[\\s;]|(?<![-*])-\\*-).*?-\\*-
    |
    # Vim
    (?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s*set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=
      (?:php|phtml)
    (?=\\s|:|$)
  )
  |
  # Regular opening PHP tags
  ^\\s*<\\?(?i:php|=|\\s|$)
'''
'foldingStartMarker': '(/\\*|\\{\\s*$|<<<HTML)'
'foldingStopMarker': '(\\*/|^\\s*\\}|^HTML;)'
'injections':
  'text.html.php - (meta.embedded | meta.tag), L:((text.html.php meta.tag) - (meta.embedded.block.php | meta.embedded.line.php)), L:(source.js.embedded.html - (meta.embedded.block.php | meta.embedded.line.php))':
    'patterns': [
      {
        'include': '#php-tag'
      }
    ]
  'L:source.php string.quoted.single.sql.php source.sql.embedded.php':
    'patterns': [
      {
        'match': '(#)(\\\\\'|[^\'])*(?=\'|$)'
        'name': 'comment.line.number-sign.sql'
        'captures':
          '1':
            'name': 'punctuation.definition.comment.sql'
      }
      {
        'match': '(--)(\\\\\'|[^\'])*(?=\'|$)'
        'name': 'comment.line.double-dash.sql'
        'captures':
          '1':
            'name': 'punctuation.definition.comment.sql'
      }
      {
        'match': '\\\\[\\\\\'`"]'
        'name': 'constant.character.escape.php'
      }
      {
        # Unclosed strings must be captured to avoid them eating the remainder of the PHP script
        # Sample case: $sql = 'SELECT CONCAT(\'"\', TRIM(cr.code)) as code'
        'match': '"(?=((\\\\")|[^"\'])*(\'|$))'
        'name': 'string.quoted.double.unclosed.sql'
      }
    ]
  'L:source.php string.quoted.double.sql.php source.sql.embedded.php':
    'patterns': [
      {
        'match': '(#)(\\\\"|[^"])*(?="|$)'
        'name': 'comment.line.number-sign.sql'
        'captures':
          '1':
            'name': 'punctuation.definition.comment.sql'
      }
      {
        'match': '(--)(\\\\"|[^"])*(?="|$)'
        'name': 'comment.line.double-dash.sql'
        'captures':
          '1':
            'name': 'punctuation.definition.comment.sql'
      }
      {
        'match': '\\\\[\\\\\'`"]'
        'name': 'constant.character.escape.php'
      }
      {
        # language-sql has single-line rules for strings that prevent injections from working; override them
        'match': '(\')([^\'\\\\]*)(\')'
        'name': 'string.quoted.single.sql'
        'captures':
          '1':
            'name': 'punctuation.definition.string.begin.sql'
          '2':
            'patterns': [
              {
                'include': 'source.php#interpolation_double_quoted'
              }
            ]
          '3':
            'name': 'punctuation.definition.string.end.sql'
      }
      {
        # language-sql has single-line rules for strings that prevent injections from working; override them
        'match': '(`)([^`\\\\]*)(`)'
        'name': 'string.quoted.other.backtick.sql'
        'captures':
          '1':
            'name': 'punctuation.definition.string.begin.sql'
          '2':
            'patterns': [
              {
                'include': 'source.php#interpolation_double_quoted'
              }
            ]
          '3':
            'name': 'punctuation.definition.string.end.sql'
      }
      {
        # Unclosed strings must be captured to avoid them eating the remainder of the PHP script
        # Sample case: $sql = 'SELECT CONCAT(\'"\', TRIM(cr.code)) as code'
        'match': '\'(?=((\\\\\')|[^\'"])*("|$))'
        'name': 'string.quoted.single.unclosed.sql'
      }
      {
        'include': 'source.php#interpolation_double_quoted'
      }
    ]
'patterns': [
  {
    'begin': '\\A#!'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.comment.php'
    'end': '$'
    'name': 'comment.line.shebang.php'
  }
  {
    'include': 'text.html.basic'
  }
]
'repository':
  'php-tag':
    'patterns': [
      {
        'begin': '<\\?(?i:php|=)?(?![^?]*\\?>)'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.embedded.begin.php'
        'end': '(\\?)>'
        'endCaptures':
          '0':
            'name': 'punctuation.section.embedded.end.php'
          '1':
            'name': 'source.php'
        'name': 'meta.embedded.block.php'
        'contentName': 'source.php'
        'patterns': [
          {
            'include': 'source.php'
          }
        ]
      }
      {
        'begin': '<\\?(?i:php|=)?'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.embedded.begin.php'
        'end': '(\\?)>'
        'endCaptures':
          '0':
            'name': 'punctuation.section.embedded.end.php'
          '1':
            'name': 'source.php'
        'name': 'meta.embedded.line.php'
        'contentName': 'source.php'
        'patterns': [
          {
            'include': 'source.php'
          }
        ]
      }
    ]
